#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define MAX_READERS 5

sem_t mutex; 
sem_t writeLock;
int readCount = 0; 

void* reader(void* arg) {
    int id = *(int*)arg;
    while (1) {
        sem_wait(&mutex);
        readCount++;
        if (readCount == 1) sem_wait(&writeLock); 
        sem_post(&mutex);

        
        printf("Reader %d is reading.\n", id);
        sleep(1); 

        sem_wait(&mutex);
        readCount--;
        if (readCount == 0) sem_post(&writeLock); 
        sem_post(&mutex);
        sleep(1); 
    }
}

void* writer(void* arg) {
    int id = *(int*)arg;
    while (1) {
        sem_wait(&writeLock);

        
        printf("Writer %d is writing.\n", id);
        sleep(2); 

        sem_post(&writeLock); 
        sleep(1);
    }
}

int main() {
    pthread_t readers[MAX_READERS], writers[MAX_READERS];
    int ids[MAX_READERS];

    sem_init(&mutex, 0, 1);
    sem_init(&writeLock, 0, 1);

    for (int i = 0; i < MAX_READERS; i++) {
        ids[i] = i + 1;
        pthread_create(&readers[i], NULL, reader, &ids[i]);
        pthread_create(&writers[i], NULL, writer, &ids[i]);
    }

    for (int i = 0; i < MAX_READERS; i++) {
        pthread_join(readers[i], NULL);
        pthread_join(writers[i], NULL);
    }

    sem_destroy(&mutex);
    sem_destroy(&writeLock);
    return 0;
}
